name: CI

on:
  push:
    branches: [master, staging]
    tags: [v0.*]
  pull_request:

env:
  RUST_BACKTRACE: 1
  RUST_VERSION: 1.53

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - name: Windows x86_64
            os: windows-2019
            target: x86_64-pc-windows-msvc
            tool: clippy
            kind: test
            backends: dx12 # dx11

          - name: Windows Nightly x86_64
            os: windows-2019
            target: x86_64-pc-windows-msvc
            tool: check
            kind: compile
          
          # MacOS

          # Mac has no software runners, so don't run tests
          - name: MacOS x86_64
            os: macos-10.15
            target: x86_64-apple-darwin
            tool: clippy
            kind: compile

          
          # IOS
          - name: IOS aarch64
            os: macos-10.15
            target: aarch64-apple-ios
            tool: clippy
            kind: compile


          # Linux
          - name: Linux x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            tool: clippy
            kind: test
            backends: vulkan # gl

          - name: Linux Nightly x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            tool: check
            kind: compile

          
          # Android
          - name: Android aarch64
            os: ubuntu-20.04
            target: aarch64-linux-android
            tool: clippy
            kind: compile

          
          # WebGPU/WebGL
          - name: WebAssembly
            os: ubuntu-20.04
            target: wasm32-unknown-unknown
            tool: clippy
            kind: wasm

    name: Check ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      PKG_CONFIG_ALLOW_CROSS: 1 # allow android to work
      RUSTFLAGS: --cfg=web_sys_unstable_apis -D warnings
      RUSTDOCFLAGS: -Dwarnings

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      # Only run clippy on MSRV
      - name: install rust stable
        if: matrix.tool == 'clippy'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
          components: clippy

      # Other builds can use nightly
      - name: install rust nightly
        if: matrix.tool != 'clippy'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: caching
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.target }}-a # suffix for cache busting

      - name: add android apk to path
        if: matrix.os == 'ubuntu-20.04' && matrix.target == 'aarch64-linux-android'
        run: |
          echo "$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: install llvmpipe and lavapipe
        if: matrix.os == 'ubuntu-20.04' && matrix.target != 'aarch64-linux-android' && matrix.kind == 'test'
        run: |
          sudo apt-get update -y -qq
          sudo add-apt-repository ppa:oibaf/graphics-drivers -y
          sudo apt-get update
          sudo apt install -y libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers

      # We enable line numbers for panics, but that's it
      - name: disable debug
        shell: bash
        run: |
          mkdir .cargo
          echo """[profile.dev]
          debug = 1" > .cargo/config.toml

      - name: check web
        if: matrix.kind == 'wasm'
        run: |
          cargo ${{matrix.tool}} --target ${{ matrix.target }} -p wgpu

          # Build for WebGL
          cargo ${{matrix.tool}} --target ${{ matrix.target }} -p wgpu --features webgl -- -D warnings

          # build docs
          cargo doc --target ${{ matrix.target }} -p wgpu --no-deps

      - name: check native
        if: matrix.kind == 'compile' || matrix.kind == 'test'
        run: |
          # check with no features
          cargo ${{matrix.tool}} --target ${{ matrix.target }} -p wgpu -p wgpu-core -p wgpu-info -p player

          # check with all features
          # explicitly don't mention wgpu-hal so that --all-features don't apply to it
          cargo ${{matrix.tool}} --target ${{ matrix.target }} -p wgpu -p wgpu-core -p wgpu-info -p player --examples --tests --all-features 

          # build docs
          cargo doc --target ${{ matrix.target }} --no-deps
          cargo doc --target ${{ matrix.target }} -p wgpu -p wgpu-core -p wgpu-info -p player --all-features --no-deps

      - name: tests
        if: matrix.kind == 'test'
        shell: bash
        run: |
          # run wgpu-info
          cargo run --target ${{ matrix.target }} --bin wgpu-info
          for backend in ${{ matrix.backends }}; do
            echo "======= NATIVE TESTS $backend ======";
            # run player tests
            WGPU_BACKEND=$backend cargo test --target ${{ matrix.target }} -p wgpu-types -p wgpu-hal -p wgpu-core --no-fail-fast -- --nocapture --test-threads=1
            # run coretests
            WGPU_BACKEND=$backend cargo test --target ${{ matrix.target }} -p wgpu --no-fail-fast -- --nocapture --test-threads=1
          done

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: run rustfmt
        run: |
          cargo fmt -- --check

  deno:
    name: Deno
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: build Deno
        run: |
          cargo check --manifest-path cts_runner/Cargo.toml
