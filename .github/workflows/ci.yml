name: CI

on:
  push:
    branches: [master, staging]
    tags: [v0.*]
  pull_request:
    types: [labeled, opened, synchronize]

env:
  RUST_BACKTRACE: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - name: Windows x86_64
            os: windows-2019
            channel: stable
            target: x86_64-pc-windows-msvc
            kind: test
            backends: dx12 # dx11

          - name: Windows Nightly x86_64
            os: windows-2019
            channel: nightly
            target: x86_64-pc-windows-msvc
            kind: compile
          
          # MacOS

          # Mac has no software runners, so don't run tests
          - name: MacOS x86_64
            os: macos-10.15
            channel: stable
            target: x86_64-apple-darwin
            kind: compile

          
          # IOS
          - name: IOS aarch64
            os: macos-10.15
            channel: stable
            target: aarch64-apple-ios
            kind: compile


          # Linux
          - name: Linux x86_64
            os: ubuntu-20.04
            channel: stable
            target: x86_64-unknown-linux-gnu
            kind: compile
            backends: # vulkan gl

          - name: Linux Nightly x86_64
            os: ubuntu-20.04
            channel: nightly
            target: x86_64-unknown-linux-gnu
            kind: compile

          
          # Android
          - name: Android aarch64
            os: ubuntu-20.04
            channel: stable
            target: aarch64-linux-android
            kind: compile

          
          # WebGPU/WebGL
          - name: WebAssembly
            os: ubuntu-20.04
            channel: stable
            target: wasm32-unknown-unknown
            kind: webgl

    name: Check ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      PKG_CONFIG_ALLOW_CROSS: 1 # allow android to work
      RUSTFLAGS: --cfg=web_sys_unstable_apis -D warnings
      RUSTDOCFLAGS: -Dwarnings

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.channel }}
          target: ${{ matrix.target }}
          override: true
          profile: minimal
          components: clippy

      - name: caching
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.target }}-a # suffix for cache busting

      - name: add android apk to path
        if: matrix.os == 'ubuntu-20.04' && matrix.target == 'aarch64-linux-android'
        run: |
          echo "$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: install llvmpipe and lavapipe
        if: matrix.os == 'ubuntu-20.04' && matrix.kind == 'test'
        run: |
          sudo apt-get update -y -qq
          sudo add-apt-repository ppa:ubuntu-x-swat/updates -y
          sudo apt-get update
          sudo apt install -y libxcb-xfixes0-dev mesa-vulkan-drivers
        # add libegl1-mesa libgl1-mesa-dri for egl

      # We enable line numbers for panics, but that's it
      - name: disable debug
        shell: bash
        run: |
          mkdir .cargo
          echo """[profile.dev]
          debug = 1" > .cargo/config.toml

      # This is separate for now because webgl isn't hooked up so we can't compile wgpu-core for wasm
      - name: check web
        if: matrix.kind == 'webgl'
        run: |
          cargo clippy --target ${{ matrix.target }} -p wgpu

          # build docs
          cargo doc --target ${{ matrix.target }} -p wgpu --no-deps

      - name: check native
        if: matrix.kind == 'compile' || matrix.kind == 'test'
        run: |
          # check with no features
          cargo clippy --target ${{ matrix.target }} -p wgpu -p wgpu-core -p wgpu-info -p player

          # check with all features
          # explicitly don't mention wgpu-hal so that --all-features don't apply to it
          cargo clippy --target ${{ matrix.target }} -p wgpu -p wgpu-core -p wgpu-info -p player --examples --tests --all-features 

          # build docs
          cargo doc --target ${{ matrix.target }} --no-deps
          cargo doc --target ${{ matrix.target }} -p wgpu -p wgpu-core -p wgpu-info -p player --all-features --no-deps

      - name: tests
        if: matrix.kind == 'test'
        shell: bash
        run: |
          # run wgpu-info
          cargo run --target ${{ matrix.target }} --bin wgpu-info
          for backend in ${{ matrix.backends }}; do
            echo "======= NATIVE TESTS $backend ======";
            # run player tests
            WGPU_BACKEND=$backend cargo test --target ${{ matrix.target }} -p wgpu-types -p wgpu-hal -p wgpu-core --no-fail-fast -- --nocapture --test-threads=1
            # run coretests
            WGPU_BACKEND=$backend cargo test --target ${{ matrix.target }} -p wgpu --no-fail-fast -- --nocapture --test-threads=1
          done

  cts:
    # Only run if we add this label
    if: contains(github.event.pull_request.labels.*.name, 'needs testing')

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - name: Windows x86_64
            os: windows-2019
            target: x86_64-pc-windows-msvc
            backends: dx12 # dx11

    name: CTS ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          path: wgpu
      
      - name: checkout cts
        uses: actions/checkout@v2
        with:
          repository: gpuweb/cts
          ref: a44186d9fa1d5babdb4a198e8ef04cf0d7035ebb # from "gh-pages" branch
          path: cts

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal

      - name: caching
        uses: Swatinem/rust-cache@v1
        with:
          key: cts-a # suffix for cache busting
          working-directory: wgpu/cts_runner
          target-dir: wgpu/cts_runner/target

      # We enable line numbers for panics, but that's it
      - name: disable debug
        shell: bash
        run: |
          mkdir wgpu/.cargo
          echo """[profile.dev]
          debug = 1" > wgpu/.cargo/config.toml

      - name: build CTS runner
        run: |
          cargo build --manifest-path wgpu/cts_runner/Cargo.toml 

      - name: run CTS
        if: ${{ matrix.os }} == 'windows-2019'
        shell: bash
        run: |
          cd cts;
          for backend in ${{ matrix.backends }}; do
            echo "======= CTS TESTS $backend ======";
            grep -v '^//' ../wgpu/cts_runner/test.lst | while IFS=$' \t\r\n' read test; do
              echo "=== Running $test ===";
              DENO_WEBGPU_BACKEND=$backend cargo run --manifest-path ../wgpu/cts_runner/Cargo.toml --frozen -- ./tools/run_deno --verbose "$test";
            done
          done

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: run rustfmt
        run: |
          cargo fmt -- --check
