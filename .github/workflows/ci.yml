name: CI

on:
  push:
    branches: ["*"]
    tags: [v0.*]
  pull_request:

env:
  RUST_BACKTRACE: 1
  RUST_VERSION: 1.62
  PKG_CONFIG_ALLOW_CROSS: 1 # allow android to work
  RUSTFLAGS: --cfg=web_sys_unstable_apis -D warnings
  RUSTDOCFLAGS: -Dwarnings

# We distinguish the following kinds of builds:
# - local: build for the same target as we compile on, and do local tests
# - other: build without testing, e.g. cross-build
# - web: build for the Web
# - em: build for the Emscripten

jobs:
  check-msrv:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - name: Windows x86_64
            os: windows-2022
            target: x86_64-pc-windows-msvc
            kind: native
          
          # MacOS
          - name: MacOS x86_64
            os: macos-12
            target: x86_64-apple-darwin
            kind: native

          - name: MacOS aarch64
            os: macos-12
            target: aarch64-apple-darwin
            kind: native
          
          # IOS
          - name: IOS aarch64
            os: macos-12
            target: aarch64-apple-ios
            kind: native

          # Linux
          - name: Linux x86_64
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            kind: native

          - name: Linux aarch64
            os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            kind: native

          # Android
          - name: Android aarch64
            os: ubuntu-22.04
            target: aarch64-linux-android
            kind: native

          # WebGPU/WebGL
          - name: WebAssembly
            os: ubuntu-22.04
            target: wasm32-unknown-unknown
            kind: web

          - name: Emscripten
            os: ubuntu-22.04
            target: wasm32-unknown-emscripten
            kind: native

    name: Clippy ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      # Only run clippy on MSRV
      - name: install rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
          components: clippy

      - name: add android apk to path
        if: matrix.target == 'aarch64-linux-android'
        run: |
          echo "$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: check web
        if: matrix.kind == 'web'
        run: |
          # build for WebGPU
          cargo clippy --target ${{ matrix.target }} -p wgpu --tests --features glsl,spirv

          # build for WebGL
          cargo clippy --target ${{ matrix.target }} -p wgpu --tests --features webgl,glsl,spirv

          # build docs
          cargo doc --target ${{ matrix.target }} -p wgpu --no-deps --features glsl,spirv

      - name: check em
        if: matrix.kind == 'em'
        run: |
          # build for Emscripten/WebGL
          cargo clippy --target ${{ matrix.target }} -p wgpu -p wgpu-hal --no-default-features --features webgl,emscripten

          # build raw-gles example
          cargo clippy --target ${{ matrix.target }} --example raw-gles --features webgl,emscripten

      - name: check native
        if: matrix.kind == 'native'
        run: |
          # check with no features
          cargo clippy --target ${{ matrix.target }} -p wgpu -p wgpu-core -p wgpu-info -p player --no-default-features

          # check with all features
          cargo clippy --target ${{ matrix.target }} -p wgpu -p wgpu-core -p wgpu-info -p player --tests --all-features

          # build docs
          cargo doc --target ${{ matrix.target }} -p wgpu -p wgpu-core -p wgpu-info -p player --all-features --no-deps

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: run rustfmt
        run: |
          cargo fmt -- --check

  deno:
    name: Deno
    runs-on: ubuntu-latest
    needs: ["check-msrv"]
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: build Deno
        run: |
          cargo clippy --manifest-path cts_runner/Cargo.toml
